# Una aerol√≠nea necesita un sistema de planificaci√≥n de rutas que permita determinar la mejor conexi√≥n entre aeropuertos.
# Para esto, debes modelar la red de aeropuertos como un grafo dirigido ponderado, donde:
# Los nodos representan aeropuertos.
# Las aristas representan vuelos entre aeropuertos.
# El peso de cada arista es el tiempo de vuelo en minutos.
# Tu tarea es implementar un sistema que permita:
# Agregar aeropuertos y vuelos con tiempos de vuelo.
# Encontrar la ruta m√°s corta entre dos aeropuertos usando el algoritmo de Dijkstra.
# Mostrar la mejor ruta y el tiempo total del viaje.

# Ejemplo de entrada:
# # Crear grafo
# red_aerea = GrafoVuelos()
# red_aerea.agregar_aeropuerto("Madrid")
# red_aerea.agregar_aeropuerto("Par√≠s")
# red_aerea.agregar_aeropuerto("Londres")
# red_aerea.agregar_aeropuerto("Berl√≠n")

# # Agregar vuelos (origen, destino, tiempo de vuelo en minutos)
# red_aerea.agregar_vuelo("Madrid", "Par√≠s", 120)
# red_aerea.agregar_vuelo("Madrid", "Londres", 150)
# red_aerea.agregar_vuelo("Par√≠s", "Berl√≠n", 100)
# red_aerea.agregar_vuelo("Londres", "Berl√≠n", 130)

# # Buscar la mejor ruta
# ruta, tiempo_total = red_aerea.ruta_mas_corta("Madrid", "Berl√≠n")
# print(f"Mejor ruta: {ruta} con un tiempo total de {tiempo_total} minutos")

# Salida esperada:
# Mejor ruta: ['Madrid', 'Par√≠s', 'Berl√≠n'] con un tiempo total de 220 minutos

# El algoritmo de Dijkstra se usa para encontrar la ruta m√°s corta desde un punto de partida hasta otros puntos en un grafo con pesos positivos (como tiempo de vuelo, distancia, costo, etc.).

# ¬øC√≥mo funciona? üõ£Ô∏è
# Marcamos el aeropuerto de origen con distancia 0 y todos los dem√°s con "infinito" (porque a√∫n no sabemos c√≥mo llegar).
# Visitamos el aeropuerto con la menor distancia conocida.
# Actualizamos las distancias de los aeropuertos vecinos sumando la distancia actual + el tiempo del vuelo.
# Marcamos el aeropuerto como "visitado" para no volver a procesarlo.
# Repetimos hasta encontrar el destino o visitar todos los aeropuertos.
# Ejemplo pr√°ctico con aeropuertos ‚úàÔ∏è
# Imagina que tenemos estos vuelos con tiempos en minutos:
# Madrid ‚Üí Par√≠s (120 min)
# Madrid ‚Üí Londres (150 min)
# Par√≠s ‚Üí Berl√≠n (100 min)
# Londres ‚Üí Berl√≠n (130 min)
# Queremos ir de Madrid a Berl√≠n.

# üîπ Paso 1: Inicializamos distancias
# Madrid = 0    (Punto de inicio)
# Par√≠s = ‚àû
# Londres = ‚àû
# Berl√≠n = ‚àû
# üîπ Paso 2: Visitamos Madrid
# Desde Madrid, podemos ir a:
# Par√≠s (120 min) ‚Üí Actualizamos: Par√≠s = 120
# Londres (150 min) ‚Üí Actualizamos: Londres = 150
# üîπ Paso 3: Visitamos Par√≠s (la opci√≥n m√°s corta)
# Desde Par√≠s, podemos ir a:
# Berl√≠n (100 min) ‚Üí Actualizamos: Berl√≠n = 120 + 100 = 220
# üîπ Paso 4: Visitamos Londres
# Desde Londres, podemos ir a:
# Berl√≠n (130 min) ‚Üí Nueva distancia: 150 + 130 = 280 (NO es mejor que 220, as√≠ que lo ignoramos).
# üîπ Paso 5: Visitamos Berl√≠n
# Hemos llegado a Berl√≠n en 220 minutos con la mejor ruta:
# Madrid ‚Üí Par√≠s ‚Üí Berl√≠n (220 min)

import math


class Aeropuerto:
    def __init__(self, clave):
        self.name = clave
        self.conexiones = {}

    def incluirVecino(self, vecino, tiempo=0):
        self.conexiones[vecino] = tiempo
        return


class GrafoVuelos:
    def __init__(self):
        self.aeropuertos = {}
        self.numAeropuertos = 0

    def agregar_aeropuerto(self, nombre):
        nuevoAeropuerto = Aeropuerto(nombre)
        self.aeropuertos[nombre] = nuevoAeropuerto
        self.numAeropuertos += 1
        return nuevoAeropuerto

    def agregar_vuelo(self, origen, destino, tiempo=0):
        if origen not in self.aeropuertos:
            self.agregar_aeropuerto(origen)

        if destino not in self.aeropuertos:
            self.agregar_aeropuerto(destino)

        self.aeropuertos[origen].incluirVecino(destino, tiempo)

        return

    def ruta_mas_corta(self, inicio, destino):
        # Inicializaci√≥n
        distancias = {a: math.inf for a in self.aeropuertos}
        distancias[inicio] = 0
        predecesores = {}
        no_visitados = set(self.aeropuertos.keys())

        while no_visitados:
            # Aeropuerto no visitado con menor distancia
            actual = min(no_visitados, key=lambda x: distancias[x])
            no_visitados.remove(actual)

            if actual == destino:
                break  # Llegamos al destino

            for vecino, tiempo in self.aeropuertos[actual].conexiones.items():
                nueva_distancia = distancias[actual] + tiempo
                if nueva_distancia < distancias[vecino]:
                    distancias[vecino] = nueva_distancia
                    predecesores[vecino] = actual

        # Reconstruir la ruta
        ruta = []
        actual = destino
        if actual not in predecesores and actual != inicio:
            return None, math.inf  # No hay ruta
        while actual != inicio:
            ruta.insert(0, actual)
            actual = predecesores[actual]
        ruta.insert(0, inicio)

        return ruta, distancias[destino]


red_aerea = GrafoVuelos()
red_aerea.agregar_aeropuerto("Madrid")
red_aerea.agregar_aeropuerto("Par√≠s")
red_aerea.agregar_aeropuerto("Londres")
red_aerea.agregar_aeropuerto("Munich")
red_aerea.agregar_aeropuerto("Berl√≠n")

red_aerea.agregar_vuelo("Madrid", "Par√≠s", 120)
red_aerea.agregar_vuelo("Madrid", "Londres", 150)
red_aerea.agregar_vuelo("Madrid", "Munich", 80)
red_aerea.agregar_vuelo("Par√≠s", "Berl√≠n", 100)
red_aerea.agregar_vuelo("Munich", "Berl√≠n", 70)
red_aerea.agregar_vuelo("Londres", "Berl√≠n", 130)

ruta, tiempo_total = red_aerea.ruta_mas_corta("Madrid", "Berl√≠n")
print(f"Mejor ruta: {ruta} con un tiempo total de {tiempo_total} minutos")
