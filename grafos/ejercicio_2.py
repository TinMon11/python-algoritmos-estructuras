# Eres parte del equipo de ingenier√≠a de una ciudad que debe optimizar su red de tuber√≠as de agua potable. La ciudad est√° dividida en sectores (nodos), y cada sector puede estar conectado con otros mediante tuber√≠as (aristas).
# Cada tuber√≠a tiene asociado:
# Costo de instalaci√≥n o mantenimiento (en miles de d√≥lares)
# Capacidad m√°xima de agua que puede transportar
# La ciudad quiere:
# ‚úÖ Minimizar el costo total de la red mientras se garantiza la conexi√≥n entre todos los sectores.
# Tu tarea es:
# Modelar el sistema como un grafo no dirigido y ponderado.
# Usar el algoritmo de Kruskal para construir el √Årbol de Expansi√≥n M√≠nima (MST) que una todos los sectores al menor costo posible.
# (Opcional) Verificar la capacidad m√≠nima total de la red construida.
# üõ† Conceptos que se practican:
# ‚úÖ Grafos no dirigidos y ponderados
# ‚úÖ √Årbol de expansi√≥n m√≠nima (Minimum Spanning Tree)
# ‚úÖ Algoritmo de Kruskal
# ‚úÖ Aplicaci√≥n en dise√±o de infraestructuras reales

# Ejemplo de uso
# # üîß Datos de prueba (ejemplo de red de tuber√≠as)
# nodos = ["A", "B", "C", "D", "E"]
# conexiones = [
#     (4, "A", "B"),
#     (3, "A", "C"),
#     (2, "B", "C"),
#     (5, "B", "D"),
#     (7, "C", "D"),
#     (8, "C", "E"),
#     (6, "D", "E")
# ]

# # üü¢ Ejecutamos Kruskal
# mst_resultado, costo_total = kruskal_mst(nodos, conexiones)

# # üìå Mostramos el resultado
# print("Tuber√≠as seleccionadas para la red:")
# for nodo1, nodo2, costo in mst_resultado:
#     print(f"{nodo1} - {nodo2} | Costo: ${costo}k")

# print(f"\nCosto total m√≠nimo de la red: ${costo_total}k")


# Salida esperada

# Tuber√≠as seleccionadas para la red:
# B - C | Costo: $2k
# A - C | Costo: $3k
# B - D | Costo: $5k
# D - E | Costo: $6k

# Costo total m√≠nimo de la red: $16k
# üåø ¬øQu√© es un √Årbol de Expansi√≥n M√≠nima (MST)?
# Es una subred de un grafo conectado y no dirigido que:
# ‚úÖ Une todos los nodos
# ‚úÖ No tiene ciclos
# ‚úÖ Tiene el menor costo posible (suma de los pesos de las conexiones)

# Se usa en problemas como:
# Red de agua
# Red el√©ctrica
# Rede de fibra √≥ptica
# Carreteras

# üîß Algoritmo de Kruskal
# Idea b√°sica: Ir agregando las conexiones (aristas) m√°s baratas que no formen ciclos hasta unir todos los nodos.
# üîé Pasos:
# Ordena todas las aristas de menor a mayor costo.
# Ve tomando las m√°s baratas y agr√©galas si no forman un ciclo.
# Repite hasta conectar todos los nodos.
# ‚úÖ Ventaja:
# Ideal si la red tiene pocos nodos y muchas conexiones.

# üîó Kruskal: Piensa en armar la red por "puentes"
# Imagina que tienes un mapa y una lista de posibles tuber√≠as con su costo.
# Ordenas las tuber√≠as de la m√°s barata a la m√°s cara.
# Empiezas a colocar la m√°s barata y sigues... solo si no haces un c√≠rculo (ciclo).
# Termias cuando todos los sectores est√°n conectados.
# ‚úÖ Lo bueno: Funciona muy bien si tienes muchos sectores pero no tantas conexiones posibles.
# ‚úÖ Ideal para: Redes donde las conexiones son costosas y escasas (ej. unir islas con puentes).


# ----------------------------
# Estructura de datos Union-Find (para evitar ciclos)
# ----------------------------
class UnionFind:
    def __init__(self, nodos):
        self.padre = {nodo: nodo for nodo in nodos}
        self.rango = {nodo: 0 for nodo in nodos}

    def find(self, nodo):
        if self.padre[nodo] != nodo:
            self.padre[nodo] = self.find(self.padre[nodo])  # compresi√≥n de ruta
        return self.padre[nodo]

    def union(self, nodo1, nodo2):
        raiz1 = self.find(nodo1)
        raiz2 = self.find(nodo2)
        if raiz1 == raiz2:
            return False  # ya est√°n conectados, no se hace uni√≥n
        # unir seg√∫n rango
        if self.rango[raiz1] < self.rango[raiz2]:
            self.padre[raiz1] = raiz2
        elif self.rango[raiz1] > self.rango[raiz2]:
            self.padre[raiz2] = raiz1
        else:
            self.padre[raiz2] = raiz1
            self.rango[raiz1] += 1
        return True


# ----------------------------
# Algoritmo de Kruskal
# ----------------------------
def kruskal_mst(nodos, conexiones):
    # Ordenamos las aristas por costo
    aristas = sorted(conexiones, key=lambda x: x[0])
    uf = UnionFind(nodos)
    mst = []
    costo_total = 0

    for costo, nodo1, nodo2 in aristas:
        if uf.union(nodo1, nodo2):  # si no forma ciclo
            mst.append((nodo1, nodo2, costo))
            costo_total += costo

    return mst, costo_total


# ----------------------------
# Datos de prueba
# ----------------------------
nodos = ["A", "B", "C", "D", "E"]
conexiones = [
    (4, "A", "B"),
    (3, "A", "C"),
    (2, "B", "C"),
    (5, "B", "D"),
    (7, "C", "D"),
    (8, "C", "E"),
    (6, "D", "E"),
]

# ----------------------------
# Ejecutar Kruskal
# ----------------------------
mst_resultado, costo_total = kruskal_mst(nodos, conexiones)

# ----------------------------
# Mostrar resultados
# ----------------------------
print("Tuber√≠as seleccionadas para la red:")
for nodo1, nodo2, costo in mst_resultado:
    print(f"{nodo1} - {nodo2} | Costo: ${costo}k")

print(f"\nCosto total m√≠nimo de la red: ${costo_total}k")
